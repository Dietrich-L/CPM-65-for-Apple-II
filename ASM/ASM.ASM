;ASM.COM -- CP/M-65 ASSEMBLER   Apple II Version
;BY D. LAUSBERG	 (C)1990
;V1.0	15.08.90
;V1.1	10.11.90
;V1.2	30.12.90	ASM-65 Version
;V1.3	20.02.91	improved error handling
;V1.4	16.03.95	some improvements
;V1.5	14.04.95	improved DB handling
;V2.0	04.06.95	APP command
;V2.1	24.06.95	LDX ABS,Y error corrected
;V2.2	26.07.98	error handling more stable
;V2.3	24.04.02	some corrections, DS length,$fillbyte
;V2.4	11.02.21	DS error correction
;V2.5	03.06.21	/L Switch
;V2.6	11.11.22	Some optimizations and error corrections
;V2.7	21.06.23	more error corrections
VERSION	= $27

;===	SYSTEM CONSTANTS
DMA	= $FE
FCB1	= $F6
BDOS	= $F0
INBUF	= $EC
CCPV	= $DE

;===	PAGE 00 CELLS
CODE	= $00	;pointer to the assembled code
PC	= $02	;actual program counter
LINCNT	= $04	;line number
LINE	= $06	;pointer to current source code line
LINPNT	= $08	;pointer to chr in LINE
BUFPNT	= $09	;pointer to chr in DMA
SNOD	= $0A	;buffer for NOD
PNOD	= $0C	
NOD	= $0E	;adr of node in label table
ERRCNT	= $10
OPCOD	= $11
OPLEN	= $12
OPLENA	= $13
MASK	= $14
MAP	= $15
TEMP	= $16
XTEMP	= $17
OPRT	= $18
OPERA	= $19	;operand A
OPERB	= $1B	;operand B
HEAP	= $1D	;lower end of lable table
ROOT	= $1F	;1. label in label table
NODSTR	= $21
LBLLEN	= $23
NODLEN	= $24
LFLAG	= $25
DFLAG	= $26
SWITCH	= $27  ; /P Printer on  /C  Check only  /L List to Screen
ERRNO	= $28
NODPNT	= $29
HEXCNT	= $2A
OPERX	= $2B
YTEMP	= $2D
YBUF	= $2E
BLK_CNT	= $2F
FCBBUF	= $50
HIMEM	= $5C	;adress of highes available memory byte +1
OUTDEV	= $5E	;Output Device

LBLSTR	= $60

TPA	= $0800

;BDOS COMMANDS
BOOTC	= $00
CONIN	= $01
CONOUT	= $02
LIST	= $05
STROUT	= $09
DSKSEL	= $0E
OPEN	= $0F
CLOSE	= $10
RDSEQ	= $14
WRITE	= $15
CREATE	= $16


;CONTROL CODES

EOT	= $00
TAB	= $09
CR	= $0D
EOTM	= $1A
LF	= $0A
CTRLP	= $10
SO	= $0F
SP	= $20

;===	PARAMETERS

MAX_ERR	= 25
MAX_LBL	= 32		;max label lenght
ABS_HIMEM = $A800/256	;absolute HIMEM
NOPC	= $EA
TAB1	= 11

;===	ERROR CODES

NOTFND	= $DD
DOUBLE	= $DC
EOF	= $D7
EOL	= $84
ZWARN	= $87
OUTRNG	= $88
LABMIS	= $89
MISWRD	= $8A
ARGMIS	= $8B
OFLOW	= $8C
ILLOPC	= $8D
SYNTAX	= $8E
ILLADM	= $8F
NOVAL	= $90
JINDW	= $91
WRDOVL	= $92
ILLDEC	= $93
DUPLBL	= $94
DUPVAL	= $95
DIV0	= $98	;DIVISION BY 0

NOCOM	= $B0
EXTERR	= $B1
ERR_OVL	= $B2
LINOVL	= $B3
LCOVL	= $B4
MEMOVL	= $B5
ILLFN	= $B6


	ORG TPA

ASM	JSR ASMINI	;INITIALIZE
	LDY #9
	LDA (FCB1),Y
	CMP #SP
	BEQ ASM1
	LDA #EXTERR
ASM6	JSR ERROR
BOOT	LDX #BOOTC
	JMP BDOS
ASM1	LDX #0
	JSR SETEXT	;.EXT = .ASM
ASM2	LDX #OPEN
	JSR BDOS
	BCC ASM3
	JSR ERROR
	BCC ASM2
	BCS BOOT
ASM3	LDA #PASS1M
	LDY #PASS1M/256
	JSR PRTSTR
ASM4	JSR GLINE
	BCS ASM7
	JSR DECOD
	BCC ASM4
ASM7	CMP #EOF
	BEQ ASM20
	JSR ERROR
	BCC ASM4
	BCS BOOT

ASM20	LDA #PASS2M
	LDY #PASS2M/256
	JSR PRTSTR
	JSR RESPNT
	LDX #OPEN
	JSR BDOS
	BCS ASM6
ASM22	JSR GLINE
	BCS ASM23
	JSR DECOP
	BCC ASM22
ASM23	CMP #EOF
	BEQ ASM30
	JSR ERROR
	BCC ASM22
ASM24	BCS BOOT

ASM30	BIT SWITCH
	BVS ASM31
	JSR R_FCB1		;RESTORE ORIGINAL FCB
	JSR SAVCOM		;SAVE *.COM FILE
	BCC ASM32
	JSR ERROR
	BCC ASM30
	BCS ASM24
ASM32	LDA #SCOMM
	LDY #SCOMM/256
	JSR PRTSTR
ASM31	BIT SWITCH
	BVS ASM33
	JSR SAVLBL
	BCC ASM34
	JSR ERROR
	BCC ASM32
	BCS ASM24
ASM34	LDA #SLBLM
	LDY #SLBLM/256
	JSR PRTSTR
ASM33	JSR PRSTAT
	JMP BOOT


ASMINI	LDA #0		;INITIALIZE VAR'S
	STA ERRCNT
	STA SWITCH
	STA LFLAG
	STA DFLAG
	LDA FCB1	;SAVE FCB1 VECTOR
	STA FCBBUF
	LDA FCB1+1
	STA FCBBUF+1
	JSR RESPNT1
	JSR LBLRST
	LDA #LBEG
	STA LINE
	LDA #LBEG/256
	STA LINE+1
	JSR SETSW
	BIT SWITCH
	BPL ASMINX
	LDX #LIST	;Printer on
	STX OUTDEV
	JSR ASMHEAD
ASMINX	RTS

ASMHEAD	LDY #0
ASMHD1	LDA PRTAB,Y
	BEQ ASMHDX
	LDX OUTDEV
	JSR BDOS
	INY
	BNE ASMHD1
ASMHDX	RTS


R_FCB1	LDA FCBBUF	;RESET FCB1 TO ORIGINAL
	STA FCB1
	LDA FCBBUF+1
	STA FCB1+1
	RTS


RESPNT	JSR R_FCB1	;RESET POINTERS FOR PASS 2
RESPNT1 LDA #0
	STA LINCNT	;RESET POINTERS
	STA LINCNT+1
	STA LINPNT
	STA PC
	STA BLK_CNT
	LDA #$FF
	STA BUFPNT
	LDA #TPA/256	;PC=TPA
	STA PC+1
	LDA #CODBEG
	STA CODE
	LDA #CODBEG/256
	STA CODE+1
	RTS


GLINE	LDY #0
	STY LINPNT
GLINE9	INC BUFPNT	;GET LINE FROM DMA
	BNE GLINE1
	LDX #RDSEQ
	JSR BDOS
	BCS GLINE2
	INC BLK_CNT
	LDA BLK_CNT
	AND #%00000111	;EVERY 8 BLOCKS
	BNE GLINE1
	STA BLK_CNT
	LDA #'.		;PRINT 1 POINT
	JSR PRTCHR
GLINE1	LDY BUFPNT	;GET NEXT CHR
	LDA (DMA),Y
	BEQ GLINE8	;EOT?
	CMP #CR
	BEQ GLINE3
	CMP #LF
	BEQ GLINE9
	CMP #EOTM
	BEQ GLINE8
	CMP #TAB
	BEQ GLINE4
	LDY LINPNT
	STA (LINE),Y
	INC LINPNT
	BPL GLINE9
GLINE7	LDA #LINOVL	;LINE OVERFLOW
	SEC
GLINE2	RTS

GLINE3	LDA #0		;END OF LINE
	LDY LINPNT
	STA (LINE),Y	;ASCIIZ
	STA LINPNT
	INC LINCNT
	BNE GLINE5
	INC LINCNT+1
	BNE GLINE5
	LDA #LCOVL	;LINE COUNTER OVERFLOW
	SEC
	RTS

GLINE5	CLC
	RTS

GLINE4	LDY LINPNT	;EXPAND TABS
GLINE6	LDA #SP
	STA (LINE),Y
	INY
	BMI GLINE7
	TYA
	AND #$07	;8 CHRS
	BNE GLINE6
	STY LINPNT
	BEQ GLINE9

GLINE8	LDA #EOF	;END OF FILE
	SEC
	RTS


DECOD	LDY #0		;DECODE LINE
	STY LINPNT
	JSR RDFLAG
	LDA (LINE),Y
	CMP #SP
	BEQ DECOD1	;LABEL?
	JSR GLBL	;GET LABEL
	BCS DECOD2
	JSR LBLPUT
	BCS DECOD3
	LDA PC
	LDX PC+1
	JSR LBLSET
	BCS DECOD3
	JSR SDFLAG
	JSR SAVNOD
DECOD1	JSR GLBL	;GET OPCODE
	BCS DECOD2
	JSR DOPC	;DECODE OPCODE
DECOD3	RTS

DECOD2	CMP #EOL
	BNE DECODX
	CLC
	RTS

DECODX	SEC
	RTS


DOPC	JSR GETMNE	;DECODE OPCODE
	BCS DOPC1
	ASL A
	TAX
	LDA XTAB,X
	PHA
	INX
	LDA XTAB,X
	PHA
DOPC1	RTS


DECOP	JSR PLINNR	;PRINT LINE NR + PC
	JSR RDFLAG
	LDY #0
	STY LINPNT
	LDA (LINE),Y
	CMP #SP
	BEQ DECOP1
	JSR GLBL
	BCS DECOP2
	JSR SDFLAG
DECOP1	JSR GLBL
	BCS DECOP2
	JSR DTWO	;DECODE PASS2
	BCS DECOP3
DECOP4	JSR PLINE
DECOP3	RTS

DECOP2	CMP #EOL
	BNE DECOPX
	LDX #TAB1
	JSR PRXSP
	CLC
	BCC DECOP4

DECOPX	SEC
	RTS


DTWO	JSR GETMNE
	BCS DTWO1
	ASL A
	TAX
	LDA X2TAB,X
	PHA
	INX
	LDA X2TAB,X
	PHA
DTWO1	RTS


PRSTAT	BIT SWITCH
	BPL PRSTA1
	LDA #CTRLP
	JSR PRTCHR
PRSTA1	LDA #PRST1M
	LDY #PRST1M/256
	JSR PRTSTR
	LDA HEAP
	STA OPERA
	LDA HEAP+1
	STA OPERA+1
	LDA CODE
	STA OPERB
	LDA CODE+1
	STA OPERB+1
	JSR MINUS
	LDA OPERA+1
	JSR PRTHEX
	LDA OPERA
	JSR PRTHEX
	JSR CRLF
	BIT SWITCH
	BPL PRSTA2
	LDA #CTRLP
	JSR PRTCHR
PRSTA2	RTS


;--- PASS 1 ---


NORMA	JSR GADRM
	BCS NORMA1
NORMA4	AND MAP
	BEQ NORMA2
	JSR PUTOPC
	JSR ICODPC
	RTS

NORMA1	CMP #$81	;ERROR?
	BCC NORMA4
	RTS

NORMA2	LDA #ILLADM
	SEC
	RTS


ACCUA	JSR GADRM
	BCS ACCUA1
ACCUA3	JMP NORMA4

ACCUA1	JSR ACCU
	BCS ACCUA4
	JMP ICODPC

ACCUA4	CMP #$10	;NO VALUE
	BEQ ACCUA3
	SEC
	RTS


ONEA	LDA MASK
	JSR ACCU5
	JMP ICODPC


REGA	JSR GADRM
	BCS REGA1
REGA5	JSR RUMC
REGA6	JMP NORMA4

REGA1	CMP #SYNTAX
	BNE REGA4
	SEC
REGA7	RTS

REGA4	CMP #$10
	BNE REGA5
	LDA MASK
	AND #$0F
	CMP #$80
	BNE REGA3
	LDY LINPNT
	DEY
	LDA (LINE),Y
	JSR GADRM4
	BCS REGA7
	PHA
	LDA OPCOD
	AND #$F7
	STA OPCOD
	DEC OPLEN
	PLA
	LSR A
	LSR A
	LSR A
	JMP NORMA4

REGA3	LDA #$10
	BNE REGA6

	APP ASM2.APP

