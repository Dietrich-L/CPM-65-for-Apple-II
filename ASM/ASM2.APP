RUMC	CMP #$01	;IMM
	BNE RUMC1
	LDX MASK
	STX OPCOD
RUMC2	RTS

RUMC1	CMP #$40
	BNE RUMC2
	LDA OPERA+1
	BNE RUMC3
	DEC OPLEN
	LDA MASK
	ORA #$14
	STA OPCOD
	LDA #$08	;Z,Y
	RTS

RUMC3	LDA MASK
	ORA #$1C
	STA OPCOD
	LDA #$40	;ABS,Y
	RTS


BRAA	LDA #2
BRAA1	STA OPLEN
	JSR ICODPC
	RTS


JUMPA	LDA #3
	BNE BRAA1


EQUA	BIT DFLAG
	BPL EQUA2
	JSR EVAL
	JSR RSTNOD	;GET (NOD)
	BCS EQUA1
	LDA OPERA
	LDX OPERA+1
	JSR LBLSET
	CLC
	RTS

EQUA2	LDA #LABMIS
	SEC
	RTS


EQUA1	CMP #NOVAL
	BEQ EQUA4
	SEC
	RTS


EQUA4	LDY #6		;MARK NOD AS EMPTY
	LDA (NOD),Y
	ORA #$80
	STA (NOD),Y
	CLC
	RTS


EQUB	JSR EVAL
	BCS EQUB1
	BIT DFLAG
	BPL EQUA2
	LDA #0
	STA LINPNT
	JSR GLBL
	JSR SEARCH
	LDA OPERA
	LDX OPERA+1
	JSR LBLSET
	JSR ORGB3
	CLC
EQUB1	RTS


DBA	LDA #1
	STA OPLEN
DBA1	LDY LINPNT
DBA5	JSR GNCHR
	BCS DWA1	;ARGUMENT MISSING
	CMP #',
	BEQ DWA1	;ARGUMENT MISSING
	CMP #''
	BEQ DBA3	;STRING
DBA2	JSR GNCHR
	BCS DWA3
	CMP #',
	BNE DBA2
	STY LINPNT
	JSR ICODPC
	BCC DBA1
DBA6	RTS

DBA3	INY
	LDA (LINE),Y
	CMP #''			;check for 'C'
	BEQ DBA2
	DEY
	JSR STO_STR
	BCC DBA5
	CMP #EOL
	BNE DBA4
	CLC
	RTS

DBA4	SEC
	RTS


DWA	LDA #2
	STA OPLEN	;ALLWAYS 2 BYTES
DWA4	LDY LINPNT
	JSR GNCHR
	BCS DWA1	;ARGUMENT MISSING
	CMP #',
	BEQ DWA1	;ARGUMENT MISSING
DWA2	JSR GNCHR
	BCS DWA3	;ALLOCATE 2 BYTES AND EXIT
	CMP #',
	BNE DWA2
	STY LINPNT
	JSR ICODPC
	BCC DWA4
	RTS

DWA1	LDA #ARGMIS
	SEC
	RTS

DWA3	JMP ICODPC


DSA	JSR EVAL
	BCS DSA1
DSA4	JSR OPPC
	BCS DSA2
	LDA OPERA
	ADC CODE
	STA CODE
	TAY
	LDA OPERA+1
	ADC CODE+1
	STA CODE+1
	BCS DSA2
	JMP ICODP6

DSA2	LDA #OFLOW
	SEC
	RTS

DSA1	CMP #',
	BNE DWA1		;argument missing
	LDY LINPNT		;argument dummy read
DSA3	JSR GNCHR
	BCC DSA3
	STY LINPNT
	BCS DSA4


END	LDA #EOF
	SEC
	RTS


ORG	JSR EVAL
	BCS ORG1
	LDA OPERA
	STA PC
	LDA OPERA+1
	STA PC+1
ORG1	RTS


APP	JSR SETFCB		;APPEND FROM FILE
	BCS APPX
APP2	LDX #OPEN
	JSR BDOS
	BCS APP1
	LDA #$FF		;SET BUFFER POINTER
	STA BUFPNT		;TO END OF RECORD
APPX	RTS

APP1	JSR ERROR
	BCC APP2
	RTS

;--- PASS 2 ---


NORMB	JSR CHKAA
	BCC NORMB1
	JSR GADRM
	BCS NORMB2
NORMB5	AND MAP
	BEQ NORMB6
	LDA OPLEN
	CMP OPLENA
	BNE NORMB3
NORMB4	JSR PUTOPC
NORMB1	JSR I2CDPC
	RTS

NORMB3	LDA #NOPC
	STA OPERA+1
	JSR NORMB4
	BCS NORMB7
	LDA #ZWARN
	SEC
NORMB7	RTS

NORMB2	JMP SYNERR

NORMB6	LDA #ILLADM
	SEC
	RTS


BRAB	JSR EVAL
	BCS BRAB1
	LDA PC
	STA OPERB
	LDA PC+1
	STA OPERB+1
	JSR MINUS
	LDA #2
	STA OPERB
	LDA #0
	STA OPERB+1
	JSR MINUS
	JSR RNGCHK
	BCS BRAB2
	LDX #18
	JSR SETADM
	JSR PUTOPC
	JSR I2CDPC
BRAB1	RTS

BRAB2	LDA #OUTRNG
	SEC
	RTS


ACCUB	JSR CHKAA	;ACCU INSTRUCTION
	BCC ACCUB3
	JSR GADRM
	BCC NORMB5
ACCUB1	JSR ACCU	;CHECK FOR 'A
	BCS ACCUB2
ACCUB3	JSR I2CDPC
	RTS

ACCUB2	JMP SYNERR	;SYNTAX ERROR


ACCU	CMP #$10	;ABS?
	BNE ACCUB2
	LDX LBLSTR
	CPX #1		;1 CHR?
	BNE ACCU3
ACCU4	LDA LBLSTR,X
	CMP #'A		;=A?
	BNE ACCU3
	LDA #$08
	ORA MASK
ACCU5	LDY #0
	STA (CODE),Y
	LDA #1
	STA OPLEN
	CLC
	RTS

ACCU3	LDA #$10
	SEC
	RTS


ONEB	LDA #1		;ONE BYTE INSTRUCTIONS
	STA OPLEN
	JSR I2CDPC
	RTS


JUMPB	JSR EVAL	;JUMP INSTRUCTIONS
	BCS JUMPB1
	LDA MASK
JUMPB6	STA OPCOD
	LDA #3
	STA OPLEN
	JSR PUTOPC
	JSR I2CDPC
JUMPB7	RTS

JUMPB1	CMP #'(
	BNE JUMPB4
	JSR EVAL
	BCC JUMPB4
	CMP #')
	BNE JUMPB4
	LDY LINPNT
	LDA (LINE),Y
	BEQ JUMPB5
	CMP #SP
	BNE JUMPB4
JUMPB5	LDA MASK
	CMP #$4C
	BNE JUMPB4
	ORA #$20
	JSR JUMPB6
	BCS JUMPB7
	LDA #$FF
	CMP OPERA
	BNE JUMPB8
	LDA #JINDW
	RTS

JUMPB8	CLC
	RTS

JUMPB4	JMP SYNERR


REGB	JSR CHKAA
	BCC REGB1
	JSR GADRM
	BCS JUMPB4
	JSR RUMC
	JMP NORMB5

REGB1	JMP NORMB1


DSB	JSR EVAL		;DS
	BCS DSB1
	LDA #0			;Dummy fill byte = $00
	STA OPRT
DSB2	JSR OPPC		;PC=PC+OPERA
DSB3	LDX OPERA
	BNE DSB4
	LDA OPERA+1		;OPERA = 0 ?
	BEQ DSB5
	DEC OPERA+1
DSB4	DEC OPERA		;DEC OPERA
	LDA OPRT
	LDY #0
	STA (CODE),Y		;store fillbyte
	INY
	JSR ICODP7
	BCC DSB3
	JMP SYNERR

DSB5	JMP ORGB3		;print code

DSB1	CMP #',
	BNE DWB2		;argument missing
	LDA OPERA
	PHA			;save OPERA
	LDA OPERA+1
	PHA
	JSR EVAL		;get fillbyte
	BCS DSB6
	LDA OPERA
	STA OPRT
	PLA
	STA OPERA+1		;restore OPERA
	PLA
	STA OPERA
	JMP DSB2

DSB6	PLA
	PLA
	RTS


DWB	JSR EVAL		;DW
	BCS DWB1
	LDA OPERA
	JSR PHEX
	LDA OPERA+1
	JSR ORGB2
	JMP DWB3

DWB1	CMP #',
	BNE DWB2
	JSR DWB3
	BCC DWB
DWB2	JMP SYNERR

DWB3	LDA OPERA
	LDX OPERA+1
DWB4	JSR DSTO
	JSR ICODPC
	RTS


DDB	JSR EVAL
	BCS DDB1
	JSR ORGB3
DDB2	LDA OPERA+1
	LDX OPERA
	JMP DWB4

DDB1	CMP #',
	BNE DWB2
	JSR DDB2
	BCC DDB
	BCS DWB2


DBB	JSR DB
	BCS DWB2
	LDA OPERA
	JSR PHEX
	LDX #TAB1-2
	JSR PRXSP
	RTS


ORGB	JSR ORG
	BCS ORGB1
ORGB3	LDA OPERA+1
	JSR PHEX
	LDA OPERA
ORGB2	JSR PHEX
	LDX #TAB1-4
	JSR PRXSP
ORGB1	RTS


ENDB	LDX #TAB1
	JSR PRXSP
	JSR PLINE
	LDA #EOF
	SEC
	RTS


DB	LDA #1
	STA OPLEN
	LDY LINPNT
DB6	JSR GNCHR
	BCS DB9
	CMP #''
	BEQ DB7
DB8	JSR EVAL
	BCS DB1
DB3	LDA OPERA
	LDY #0
	STA (CODE),Y
	JSR ICODPC
	RTS

DB1	CMP #',
	BNE DB4
	CPX #0
	BEQ DB
	JSR DB3
	BCC DB
	RTS

DB7	INY
	LDA (LINE),Y		;check for 'C'
	CMP #''
	BEQ DB8
	DEY
	JSR STO_STR
	STY LINPNT
	BCC DB6
	CMP #EOL
	BNE DB4
	CLC
	RTS

DB5	CLC
	RTS

DB9	LDA #ARGMIS
DB4	SEC
	RTS


	APP ASM3.APP

